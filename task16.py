def reverse_complement(seq):
    complement = {"A": "T", "C": "G", "G": "C", "T": "A"}
    bases = list(seq)
    bases = reversed([complement.get(base,base) for base in bases])
    bases = "".join(bases)
    return bases

def codon2aa(codon):
    if codon == "GCA": return "A"
    elif codon == "GCC": return "A"
    elif codon == "GCG": return "A"
    elif codon == "GCT": return "A"
    elif codon == "TGC": return "C"
    elif codon == "TGT": return "C"
    elif codon == "GAC": return "D"
    elif codon == "GAT": return "D"
    elif codon == "GAA": return "E"
    elif codon == "GAG": return "E"
    elif codon == "TTC": return "F"
    elif codon == "TTT": return "F"
    elif codon == "GGA": return "G"
    elif codon == "GGC": return "G"
    elif codon == "GGG": return "G"
    elif codon == "GGT": return "G"
    elif codon == "CAC": return "H"
    elif codon == "CAT": return "H"
    elif codon == "ATA": return "I"
    elif codon == "ATC": return "I"
    elif codon == "ATT": return "I"
    elif codon == "AAA": return "K"
    elif codon == "AAG": return "K"
    elif codon == "CTA": return "L"
    elif codon == "CTC": return "L"
    elif codon == "CTG": return "L"
    elif codon == "CTT": return "L"
    elif codon == "TTA": return "L"
    elif codon == "TTG": return "L"
    elif codon == "ATG": return "M"
    elif codon == "AAC": return "N"
    elif codon == "AAT": return "N"
    elif codon == "CCA": return "P"
    elif codon == "CCC": return "P"
    elif codon == "CCG": return "P"
    elif codon == "CCT": return "P"
    elif codon == "CAA": return "Q"
    elif codon == "CAG": return "Q"
    elif codon == "AGA": return "R"
    elif codon == "AGG": return "R"
    elif codon == "CGA": return "R"
    elif codon == "CGC": return "R"
    elif codon == "CGG": return "R"
    elif codon == "CGT": return "R"
    elif codon == "AGC": return "S"
    elif codon == "AGT": return "S"
    elif codon == "TCA": return "S"
    elif codon == "TCC": return "S"
    elif codon == "TCG": return "S"
    elif codon == "TCT": return "S"
    elif codon == "ACA": return "T"
    elif codon == "ACC": return "T"
    elif codon == "ACG": return "T"
    elif codon == "ACT": return "T"
    elif codon == "GTA": return "V"
    elif codon == "GTC": return "V"
    elif codon == "GTG": return "V"
    elif codon == "GTT": return "V"
    elif codon == "TGG": return "W"
    elif codon == "TAC": return "Y"
    elif codon == "TAT": return "Y"
    elif codon == "TGA": return ""
    elif codon == "TAA": return ""
    elif codon == "TAG": return ""
    else: return -1

def to_RNA(kmer):
    return kmer.replace('T', 'U')

def translate(seq):
    protein = ""
    seq = seq.replace('U','T');

    # // Begin parse of sequence
    for i in range(0, len(seq), 3):
        # // If there are not 3 bases at end, cut it off
        if i+3 > len(seq):
            protein += "-"
        # // If there are 3 next bases:
        else:
            # // Get next codon's amino acid
            amino = codon2aa(seq[i:i+3])

            # // If no amino acid match, ERROR!
            if amino is -1:
                protein = "ERROR: Unrecognized text in sequence!"
                break

            # // If reached a STOP codon, output it and stop loop
            elif amino is "":
                break

            # // If reached a valid codon, output it
            else:
                protein += amino;

    return protein

def find_encoding(dna, peptide):
    result = []
    patterns_dna = [dna[i:i+len(peptide)*3] for i in range(0, len(dna)-len(peptide)*3)]
    patterns_rna = [to_RNA(item) for item in patterns_dna]
    reversed_patterns_dna = [reverse_complement(item) for item in patterns_dna]
    reversed_patterns_rna = [to_RNA(item) for item in reversed_patterns_dna]
    for dna, rna, r_rna in zip(patterns_dna, patterns_rna, reversed_patterns_rna):
        if translate(rna) == peptide or translate(r_rna) == peptide:
            result.append(dna)
    return result

dna = "ATGGTAGTAATCACCAAGATCGGTCTTTCAGGTAATCCGACGGCGTTTGTTTTCATCTCCATCCTACTCTCATAGTGGCGCGGTGTCACAATTAAACGGACATTTGTTCGTGACAGCGCCTTTCCCAACATGCTTTAGACATGCGAGTTTATGCTCTCTTCACGACGAGATAACCATGCTATCATCGCTCAAGGGGTACAGATTCGACCGTTGTTCAGATAGCGCGCACGTCTTTTGCGGCCTCACGCGGCCCCCGAAAGCATGTAGGAAAGGGTGCGTGGTGTCAAACCAGCGATGTTCTATGATAGTATATTAGCGCTATGGCTTATACGCTGGTGAATAGGTGCGTGATATGCTAAATATTTATTGAACCCTGATAATAAAATTATTCGTGTTCTCACCGACAAGTGTGATAAGGCCCACGCTCTTGTGGGGTAATTGGGTAGGACCCACGATTGCCAGGTCGACTGCTTCTTTCCTAACGCGCGGCCCACCTTACCTCAGGCGGCCTTCTATTAATGGCCGAGCTGAGTTGACTGTAGCAGTTGGTTTCGAATCGTAAACAACTATAAATTACCCTTGCCTCGTCCGAGCCGGTAAGTCGGTATGGAGTACTGGAGTTCGTAGGTAAGTTCATGAAAGGCCGCTAATTTCTTCCGCGCGCAGTGTGGCGATTGACATACCTCACCGTCCTGCTGTGACTATCCGTGGGAAGGTTGGGTTAATTGCTTAGGGACAGGATCGGATAAGTTACTTAAAAGAGCGTTGAGGAGGTGCTCCAGTTCACGGGGAAGCGGTCGGATATACGGCAACCAAAATGACGCTCCCCCGAGAGTCTGATCGAGAAGAACACCAAATTTTAAGACAATAGTCTCAATATATAAGTGCTTTATCCACAGAGGCATTGCGGCCACGTCACCAGGCTGCCGACCGCTATCCCAGGCGTAAGCCCGCCCCGCGTTTACGGATCGAGGGAGATTAGCCGGCAAAAATCCTTTTCCTATGATCAACGGGCGTACTGGGTGCTGGCGGGTTCGCACCCATATCGGTAAGTGGGAGATGTCAGAAACAGCCTCCCACAGTTGAGCATACCCATACTAGACTGACACGCAGTTCCAACAATGGAGTATAAGAAGGAGGTGTTTATCAATGGCGAGTCCATTTGTCCGACTATTGGGTGATAGGGAGACACCGCAAGGCGCGCACCCGGAAGCACGTGGGAAACGGCGCTCTGGGCGGACAGGGTGCAAGTTATCCAACCGGTACACTAGACCGAAGAGCTGCGATCTATCTGTCGGATTGGCTGAGACTTGTCAGGCGGGTGACCCGTTGCAGAGTAGCGCGCGCTCCCTTCCCGACCTGTTTTAGGAGAGTGGATGCACACTTGGCATTTAGCATGAGATGTTGTCAGCCGAATGTCGATCAATACTGCTTAGAAAATAGTGTCTAATCAATTTGCGGGGCACAAATCGCGGTTAGCAACTTTCGGCCTATCGCGCCAAGCCAACGTTGGTCTGAACACATATAAGCACTAAGCTCTACATCTCGCTAAAATAGTGACAGCAGACATCAAAAGACGCTACCTTGATTTCCAGTCTTCGATCGAAAGCACGTGGGGAAGGGAGCACGAAACCTCCAGACGGAATCACCACGTCGTACTGACCGAGATTCACAATAATAAATGAGCAGTCGAATGCACTGACCCTAGTTAACAGCCACTCCGGATCTTGTGGCACAGGGACGTCAGTACTTTACATCGCCAACAACTCCAACCGGGGCACCGGAACCAGTGACGTGTGGCTATACGGGATGCGGGCCATAGGCCTCGGGGGATTGATCCTCGAATTGCTTTCTAGCCCAGTACTGGCGCATTCGCTGAAACATACTTTCGCAAACCAAACAGGCTAGAAATTGCCGTGCTCGTGATTGCTCGAACGCTATGCACGTGCACACAGTAACTCCTTAGCCTCTCCTAGCTCTCTGATGGCACACACCAGACATATCTAAGCGGACTCTCCATAGTTAAGAGACTTGCGTTTAAGCCCTGTTGGGGCGTCCTCGAACCGGTAGGGCCGGGTGTAATCCAAAGCGTTCTAGCTGCTGCTAAAGCAGGTTTCGGTGACGGTAGCAGTGCAGTGCGTCAGTGTATACAGTGTGCGGTCCGCTGCCTCCCGTATAACCTTTCGTTCGCAGCCTTGTGTAAACTGGAGGTAGCCCTCCGCCAACCGCCGTCTACGTATGCGACTGATCTTCTTTACAAGCGGCTGCGGGAGGTAGAGTGATTGGAATGTGTAACAGCGGGCCATAGATGTCTCGGGCCACTGGCGCCGTGCACGCGAAAACAAGTGGGAAATGGCGCATATAGACTCAGTGACATCACGAACTAGAGGTATTCGCCCGCGTCCATCAACTTTCTTAAATCTATCCTAAATTGTACTAGAGGTGCAATTTGAATGAGGTCGGTTTTAATTCATAATTAATAAAATATAGGGACACGGATTCGAATCAGCTCGTTCGTTCTTAGATATAGCGGTGTAACGTCCGGAATACGCCGTAAGTCCAAAAACGAGCTACCAGATAACAAGAACCTTCGGTACGCCATCTAAGACAGCAGACTGCTGTAATCCAACCTGTTGACTAAGTTCTTGTGGCCATTTCTCGTATCCGTCCTTTAGTCCTATGTCACACTTCGCTATTGATCGCGTGCTGCACCTGGGGAAATCACTGGTCATATGGTCGCACCTTAACGTGGCCACAAGTTCGGCGCTTTTGTACGGCGTCGGCAAGGGCCACGCCTGGTGCGCGGGGACCTAATGTCAAAGCATATCGCCTCTCCCATTGGTTAGTAAGATACTGCACGGAACTTTGCCCAATCCTTGGTCAGTAAGGCTGGTCTATTTCAAATGAAGCGATGAGGCCAACTGTTTACTCTTTATTTTCAATACGGTATACTGCATGATATTAGCCCATTCTAAATGCGAGGCAAGGTAACTGAGGGGAAGTGCCACGCTCTCCGGGGCCAAGTGGCCGATAGAATGACCCCCATACACTCGGTGCGAGCGGCTTAGTCGAGATGCCCGCTAACCACGAAGTGGCCTAAGTGACTGACCTAAGAGACCTGCTTTTGCTCGGCATTGCGAAACACGTGCCTAAGTGTCCCATCAGACCGTTAGAGATGCAACCGACTAACTCTCCGTGTGCCTGAAGCAGGTGGGGAAGGGAGCAAAAGCTATCAAGTCAAAAACCGATCACTGCTACCAGAGAGAGATACTCCGGAACGCGGTTTCTCCGACTCTGTTCATAACGAAGATTTGCTCGAGCGGATAGCATGTTCGCAGATTCCGATGTCAATCGCACGCGAAGCCCGCTTACTGCATATAGAGATACGAAGTACCTGAGCGGCTAAGGGCAGCCCCGCGTTCAGGGTTTTACATAACTGGGCAGGGCGGATAACCGTTGTCAGGCTGACACGTCGCCGGAGGCGCGCGGAATTTCACAGCAAAACATGGGTCTGCTCTTCACTGACTTGGACAGCGTCGCACACTCGAGTGCCGTAAGCCACAGAGGGGATACATCTCCCAGAAATACGAATGTCAACATAGTCTAAATTCCGATTACGAATTCCCGCTAGGTCGATCCGTCCCGGGCGCGTGGTCCTTTAGGAAGCAGATATGCTGTGTCCAATCGCAGTATTCCGATATCCATTCCCGAGGGTCTTGTATGCTTTGTGGGTCCAAGTTCCAGCTCGGTCCAGCCATATCCACGGCCTGAAGCAGGTCGGGAATGGCGCAGGCTCGACCTGGGGGTTAGATGCGCCAACAAGCATAGTTTGGTGTCTTGCCCATTATAACCCGTAAATCCTACGACCCTGCTGATGAATAAGTATTATCCTTCTAATCCCGCTCGACACGAGTATACCCCTTGTGAGTGCACCTCGAGATTAAGAAGTGACTCTGTCAGATTTATCGGGAGCGCCCTTAGCTTTATTGAAACATAACTGTCTCGCCCCATTTCCAACGTGCTTTCGAGAAGCCCTCTGCACCTACTTGATCTTGCGTGGTAACTGGAACACTTTCGCTTTAAAATTTTGTGATTACCAGTGCCGTACTTTGACGAACACAATGTAGACGCTAGCCTGAGCGTACATCGCCTTGATACCACATATTGAACGTTGCCAATCGGCCTAATCCAGGGTACGCGCACGTCTTTCGAACCAAAAGACTTGCGCTTGCTGGAATCTGGCAATGAATTATTAGTCCTTGAATGATGACTTAGGTGTCGTATTCTTCAACTACGTTGCGTAGTCAGTGGATGGACAGAAACTTCTAATAGCTCACGCTCCATTTCCCACCTGCTTCCGGTCCAATGACACCGACTGTCAGATCTGCCCAAGGCCCTGCCCCGTAGACATCGCACACGTGTGTCATTTTACGTTGGACAGTGAAATGGAGAAAGGTCATCGTGTTTCAATAGTCCGTCCTACCGTATAGTGACACGGAGGTAGCCGTAGAGGCATAGTGACTGCTTTTCGAACTATGTCCTTCGCGTGATGTTTTTTTGCCGTTAAATCGCATAGACGGGTTCAAGAATCCTTCGGGCTTTCGGACTTAGATGCCCTTTGCGGGAATGCGGCAGCGCTCGTCACGCCCACTAGCTCAGGCGCATGGAGTGGAATGCATACCGCTGACAGTTGTATTGTAGGAAGATAATCGACTAGCCATACCTGGCATATGTTCTGGACGCACGCCATTTTAATACCCTTTAGGATGCGGTTCTTAATTCGAGATGATGCCGCTCGTCAATCCGTCCCTGTCACACCTAAGAGCGGTTTGGACTCGTAACACAGCGCCATATCTTCTTGTCACGAAAGCATGTTGGAAAAGGGGCCACAAGGGCCATAGCCGGGAGTGTGGTAAGTATGAAGAGTCGAGGGGCCAATAAGAGATGCATTCAATGAGATCAAGCAAACTCAATTGACAATCGTTCGACCAGTTTTCGACGTGCCAATGTGCACATTAACTGGCCGGCGGCTTATCGCCAAAGGTAAATATGGACCGGCCCCAGGTGTTTACGACTGGAGGCTAGTGCGCTCGAAAGCCTGGTATGGCTATGACTCGTTGTGGGTCTCCTCGGTTCCGGTATGGTTTCATGCCGCAAGTAGCGTTACCGGCGGCTTGTGTGATTGTGGTGTCTTAGAAAATCACCTCTCGGGGTAAGTAGAATACACCCGCAATCAAACCTGACCTGAAGCAGGTAGGGAAGGGGGCAACAAGATAAGCCAGTGAGGAAGTCGGCTTTCCTTCGAGGTCCGGCTAGACTATTGCGCCCAGGACAGGGGCCTCGGGAACCGGTCGTTGCAAACAAATAGGCAGATGTCCGTGTAGCTCGCCTATCCTAGAATTAATTGGTAATTCGGTACGCTTATTTCAGTGCAGTTCCACAAATATGTATCCTGGCAGCAGTCAGATTGCCCTTAGTTGCTTCCGTACTGCGTCCAACTAGGATCATCTACAGGGTGACTCCCATATCTCCACCAGGAGATACCCGGGCTGCAGCACCATTCCCGACATGCTTCAGAGACTCGGAAAGCAGGCTTAAGTTGTGTGAGAACCGTTACTTAGGTCAGATGAAGGCCCTCTGACAACCTGGGAGCATGACGGTCACCCTACGGGTAGTCACCCTACTGCATATGGCCCTTGCAACGCCCAGTTTCAGTATGACAGCCTATAAGGTAGGCCCGAATGTACGCCACCCCGTTGCAAGTTTGCATACGCCCAGAGATGACCTGATCTTCACAATAAGCAGCCGTTTGATATTAGGCCGGCAAATTGATACTGCGAGTTCGTAAAAACCTCACTTTACAAAATCTTTCGCAAAGCCGTCGGCACGTGATATGGACGAAGCGGATTGGGGACGGAACCGCAATACTCCTGTCCGTCTTTAAGCATGTGGGAACTACGATATGTTGCGAAATGCTCTGTAAGGTAGTCGATGTACGCAAACAAAAGAGGCCATTTACAGTTATCCACTCATCTGAAAATGGTAACCATCTACAGCGTCTTTCTTGCACGAGCCCTTCTATTACGTGTGCGTGGGAGTGTTTCGCCCATTACCCATGATTCGCGATTCTATGAACGCAGGGGAAACCACACCCAGTCTGGCTGCCCGAACCATTTTCCCCTGATAGCCGCGTGCACCGCATGCCCCCTAACAGGTTGCGGTAGGCATATAAGCTAACATTCTGCACCGTCGATCATCGAAGGTCCGATTTAAGGCGGTTGCCCAGTGAAGTGATCGACACGGCGTGACGGATTGAGTCTCGTCGGCTTCCGAATCCACTGCGCCAGGACTGCCCAGCCCGTACATCCTGGTCCCCAGGTCCATAAAAATGTTCCGGAAGTTACCGAGGGCACCCTTTCCAACTTGTTTCCGTATGTACAGGATGGTGATTACAGATTCAATGGCACGGACTCAGCCCGCACAACTCTGGGCTGCTCCTCCCACATTGTGAATTGGCGTGTCCATCCAATGGCCTCGTCGGCTCATTGGGGCACCATTAGGCGGGGGAAGCGGTTGTCTGGAAATTCATAGCACACGGACACCATGTCCCTGTTAGTTGTTAACATTAGTTAATTGATGCTTGGGTACGGGCGTCGACACTTTTCATGGAGACAGGTAAAGAAAGCGTGCTAGTTAATCAGTTCTGTCCGCAGCACCGTTCCCGACTTGCTTTCGGCGGGGGGGTATCGAGATATTGCCCACTTTGGAGCTAAGGAGTCCGTTCACACAAGGGGGGGTGAATGGTGCTGGGTTTATAAGCAGAAGATTAGTTACTTCGCGCTCTAGGGAAACCTTTTTACCGTTAGCAAATTCTAAGCAGGGACTCTAAAAGATAGCTCTATTCGAGTGGCCGCGCCTAGAGCTGAACAGGCTGTGAAGAGAAAATGCCGCCCCCCATTATTTGGCCAGGGAGACAGCTGCGATTCGTAGTACGCGACGCGCAACCACTCTTGCATGAAGAGAATTTACCGCAGTGAGAAATGAAGTACGAATCGACTTAGGTTTAATTTTTTAACGCTGGCATGACCCCCCTTACCGCTCGAACATGGGAGTTTTGGTCTGCGGCTTATACGGGGACGCGCGGCGTCGAAAACAAGTCGGGAAGGGAGCAAGTTGGGGTGAAAGCTAAGGACGGCGCGGATCTGTAATAGATAGGCGACAGTTGAATCTGCCGCAGTCGCGCTCCCCCTCGGAGTGACCCCCGCTCACTCAGAGTCGATACGGGGGAATGTATCAACGGTTCGTACTGGCGTTGAACGTTTTCAAGGCGCCGTTTCCCACCTGTTTTAGAAAGGGCGCTATAGAATTCCCGCCATGGGAGGTCTTTGGTTTCCTTAGCCGGGGTGAGATCGCAACCTTCAACTTCGGGTGGCTACGCCATCAACAGCGGCCAGCGTGTCATAAGGGTGGGGAAACCAATCGCTAATTTACGAACCGGATTTTCGGAAATGCATACGACTAGATGAAAAGCTCCAGCAATGACATTGGGGTCCACGGAGATTTATCCAAGCAAACCCCGCGGCTGCTAGCTGTAACCTAAGGACGCTCAGAGGTCGTACAACTTCGTCCTTATGCTCACCACGATGGATACAGCCCCGCAGGCCAGCCTATTAAGGCCTTTGACTCAATGGGTTTAGAGTCTTCATTAGACACTGCGATTTTTTATGAAGGAGAGGGTCTTCTGGGTTACTGTCACGCTTGCTAGAAAAGCTATCACGCCACGGACTTTCGCAACGCACAAATAAACGTGGCCGGCATCTGGTCCCACAACTGCGTGTTAGCCCCTGAAAAGTGCGCTAGTATAAGTCGCCTGAAACACCTGCCTGATTCTGGGAGAGGTAATAAAGCTGGACACTCATGCACGTGAAAAAGGTTGATGCTCCTCTTTGCTGGCACCGGAATTGGTTATCTCCGGCACGATCAGGTAGAACACATTAGGCGTCATGGCGGTAGTAGTGTGGATATTCCTGACATTAGGTGGATACAGCACTTCTGAAGAACTAATAGACGTAACAGTGGTAGTTTTAGATGTCCGCCTGACGTATTTCTCGATACATCGTCCTGTCTTCGAATGGACTTGTTGGTATTCAAATAGTCAAACCTTGTGTTACCAATATTCGCTACCTCGCCGCTCGCCCCCTTTCCAACCTGTTTCAGGACAGATGGCCATGACAGTTGACATATTTCCAAGACAACGCTAAGTAGTAATACAATCGAGCGTCCCCCCTTCCGCATATTTGCCGACCGCCATAGGTCTCCGGAGAGCGTCATGCTGCTGGAGCTGCTACTATTTAGCCGAAGGGGCTCTCTAATATACCCATATGGTATGGCGCTCCTGTATCATAGTCCATGCCATGAATGAGCCTTTGTATCCCTGGGCCTACGGCGGTGGCAAGACCACCAAACTCGAGGTCTGCCAAATTGATTGCTGCCCCGAAAGCGCTTGCTTAATAAGGCCTATTGCGGTTTCTGGAAGCTCTATGCACTGGAGCACAACTTGCGACAGTTGTCTATGGCGTCCACCCCGGACGTGTTGGTAGCCAATTGACTTCCAACGAGGGTCTTAATAGCTGGAAATAGACAGTTGACTGTATACTCGGCGTGGACCCGACGAGTTCTGAGGAATCTCTTTACAGGCAGGAACAGGTCGTGTGTATGGCTTGTACTTTCTTATATGTACTCATAGATGCGATGAATCTCCGCAAGTCGGTTGATATCTGTTCCTGTTGGTTGATTATGCAGAAGAACGGCATAAGCCAATATTTATCGTGGTATAGTGACACTTTTCATGATGGTACGTGCCCACAGTTGACTATTCGGACAGAGTTAGGTTTGGCATCCTTGCCTGACGGACGGGAGTACTTACCAGTCAGAGTCTGTTAGAGGGCTGTTCATGAATGATAAAAACTAGAGACTGAACGCGGCCTTGGCCGGCCTTCATCTAAAAACAACTGGGCATATACGGGTCTAGGGGTAGATATCCGCATACTCACACACCGGCGATTATTCCTGAAGGCAACATCCAACTGCTTGATAAAAGCAGCAGCGTCCATAGTCCATGGAGCTGACCTCTGCGTGATTAATTAGTACTACTCTGTTGTGTAGGGGAACTACACTGGAAAAGAGCGACATGGCCAATCAGCTTTACGGTATTTACTCATTAAGGACCGACCTACACCAACGTGAATTGCGGGGAAAGGCTCCCTTACGGAATCAGGTTCTTCTTACATAGAATTTTACTAAGGTAAAGTGCAACCACGGCAGTCCTACGTAGGTATTCTCCGAATACACGCGCTCGGTAAACGTTAATAGACGCGTGTGGCAAGGGATCGGATTTCAACGCGTCTACAGAGGCACCTTAAAGTAGTTTACAAGGCGAGGGCAATGGTACGCATACCGGGAGAGCGCGCCGTTTCCCACTTGCTTTCGAGGTCGGGAAACTCAGCCAGGCCGTGCCGAGTCCCAAATGCCCTTAACAGTAACGTCGGTCGAATCATGCCCGTATTGGTCGTAGTCGCGTTATTGGCATTAACACGACGCTTAGGGGCCGACGTGGGAAGCCCTAGCGGAGTTAAAAAAGAAGAGCAATCGCGCAGTGAACACCACTGAAGAGACTAGGGTATTGAAGAACTGCATCGCCTACCACGACCTTGCGTAACCTGTGTTTCAGGTGTTGTGTGTACAAAACATACTCGGAGTCCTCTTCCGCATAAGGCCTAGCGCAATTCCTTCACACCTCCAAAATACAGGACCGGGCAACGCAAAGGTGTCGGTATACGCAGTCTATCGCTCTAATTTTAAAGAGGTCCCCGGATTTATTAA"
peptide = "APFPTCFR"

result = find_encoding(dna, peptide)
print("\n".join(result))
